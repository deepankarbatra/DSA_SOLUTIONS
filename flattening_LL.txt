Given a Linked List of size N, where every node represents a sub-linked-list and contains two pointers:
(i) a next pointer to the next node,
(ii) a bottom pointer to a linked list where this node is head.
Each of the sub-linked-list is in sorted order.
Flatten the Link List such that all the nodes appear in a single level while maintaining the sorted order. 

Note: The flattened list will be printed using the bottom pointer instead of the next pointer.
For more clarity have a look at the printList() function in the driver code.

solution: 

/*Node class  used in the program
class Node
{
	int data;
	Node next;
	Node bottom;
	
	Node(int d)
	{
		data = d;
		next = null;
		bottom = null;
	}
}
*/
/*  Function which returns the  root of 
    the flattened linked list. */
class GfG
{
    Node flatten(Node root)
    {
	    if(root == null || root.next == null) return root;
	    root.next = flatten(root.next);
	    root = merge(root, root.next);
	    return root;
    }
    
    Node merge(Node root, Node nex) {
        Node temp = new Node(0);
        Node res = temp;
        while(root != null && nex != null) {
            if(root.data < nex.data) {
                temp.bottom = root;
                temp = temp.bottom;
                root = root.bottom;
            } else {
                temp.bottom = nex;
                temp = temp.bottom;
                nex = nex.bottom;
            }
        }
        
        if(root != null) temp.bottom = root;
        else temp.bottom = nex;
        return res.bottom;
    }
}

tc - O(N)
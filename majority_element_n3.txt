Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.

 

Example 1:

Input: nums = [3,2,3]
Output: [3]
Example 2:

Input: nums = [1]
Output: [1]
Example 3:

Input: nums = [1,2]
Output: [1,2]

solutions:

class Solution {
    public List<Integer> majorityElement(int[] nums) {
        List<Integer> list = new ArrayList<>();
        int cnt1 = 0, cnt2 = 0;
        int ele1 = Integer.MIN_VALUE, ele2 = Integer.MIN_VALUE;
        for(int i = 0; i < nums.length; i++) {
            if(cnt1 == 0 && nums[i] != ele2){
                cnt1 = 1;
                ele1 = nums[i];
            } 
            else if(cnt2 == 0 && nums[i] != ele1){
                cnt2 = 1;
                ele2 = nums[i];
            }
            else if(nums[i] == ele1) cnt1++;
            else if(nums[i] == ele2) cnt2++;
            else{
                cnt1--;
                cnt2--;
            } 
        }

        int e1 = 0, e2 = 0;
        for(int i = 0; i < nums.length; i++) {
            if(nums[i] == ele1) e1++;
            if(nums[i] == ele2) e2++;
        }
        if(e1 > nums.length / 3) list.add(ele1);
        if(e2 > nums.length / 3) list.add(ele2);
        return list;








        // List<Integer> list = new ArrayList<>();
        // Map<Integer,Integer> map = new HashMap<>();
        // int mini = (nums.length / 3) + 1;
        // for(int i = 0; i < nums.length; i++) {
        //     int value = map.getOrDefault(nums[i], 0);
        //     map.put(nums[i], value + 1);
        //     if(map.get(nums[i]) == mini) {
        //         list.add(nums[i]);
        //     }
        // }

        // // map.forEach((k,v) -> {
        // //     if(v > nums.length / 3) {
        // //         list.add(k);
        // //     }
        // // });
        //    return list; 
        
    }
}
Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 

Example 1:

Input: nums = [3,2,3]
Output: 3
Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2

solution: 

class Solution {

    //moore voting algo
    // tc- O(n)
    public int majorityElement(int[] nums) {
        int count = 1;
        int element = nums[0];

        for(int i = 1; i < nums.length; i++) {
            if(count == 0) element = nums[i];
            if(nums[i] == element) {
                count++;
            } else {
                count = count - 1;
            }
        }

        return element;


        //tc - log(N)*N
        //  if(nums.length == 1) {
        //     return nums[0];
        // }
        // int n = nums.length / 2;
        // HashMap<Integer, Integer> map = new HashMap<>();
        // for(int i = 0; i < nums.length; i++) {
        //     if(map.containsKey(nums[i])) {
        //         map.put(nums[i], map.get(nums[i]) + 1);
        //         if(map.get(nums[i]) > n) {
        //             return nums[i];
        //         } 
        //     } else {
        //         map.put(nums[i], 1);
        //     }
        // }

        // return 0;


        //tc- Nlog(N) + O(N)
        // if(nums.length == 1) {
        //     return nums[0];
        // }
        // Arrays.sort(nums);
        // int count = 1;
        // for(int i = 0; i < nums.length - 1; i++) {
        //     if(nums[i] == nums[i + 1]){
        //         count++;
        //         if(count > n) return nums[i];
        //     } else {
        //         count = 1;
        //     }
        // }
        // return count;
    }
}
Given the head of a singly linked list, return true if it is a 
palindrome
 or false otherwise.

Input: head = [1,2,2,1]
Output: true

solution: 
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode head) {
        if(head.next == null) return true;
        ListNode slow = head, fast = head;
        while(fast.next != null && fast.next.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }

        slow.next = reverse(slow.next);
        slow = slow.next;

        ListNode dum = head;
        while(slow != null) {
            if(slow.val != dum.val) return false;
            slow = slow.next;
            dum = dum.next;
        }

        return true;
            
        
    }
    public ListNode reverse(ListNode ptr) {
        ListNode pre = null;
        ListNode nex = null;

        while(ptr != null) {
            nex = ptr.next;
            ptr.next = pre;
            pre = ptr;
            ptr = nex;
        }

        return pre;
    }
}
Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

 

Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].

solution: 

class Solution {
    public int[][] merge(int[][] intervals) {
        List<int[]> overlappedList = new ArrayList<>();
        Arrays.sort(intervals, (a,b)->a[0]-b[0]);
        // Arrays.sort(intervals, new Comparator<int[]>(){
        //     public int compare(int[] a, int[] b) {
        //         return a[0] - b[0];
        //     }
        // });
        int start = intervals[0][0];
        int end = intervals[0][1];

        for(int arr[]: intervals) {
            if(arr[0] <= end) {
                end = Math.max(end, arr[1]);
            } else {
                overlappedList.add(new int[]{start,end});
                start = arr[0];
                end = arr[1];
            }
        }
        overlappedList.add(new int[]{start,end});
        return overlappedList.toArray(new int[0][]);
    }
}

tc - O(NlogN) + O(N)
sc - answer list space O(N)
Given the head of a linked list, rotate the list to the right by k places.
Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]

solution:
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if(head == null || head.next == null || k == 0) {
            return head;
        }
        
        //brute force
        // for(int i = 0; i < k; i++) {
        //     ListNode temp = head;
        //     while(temp.next.next != null) { 
        //         temp = temp.next;
        //     }
        //     ListNode end = temp.next;
        //     temp.next = null;
        //     end.next = head;
        //     head = end;
        // }



        //optimal approach
        ListNode temp = head;
        int len = 1;
        while(temp.next != null) {
            temp = temp.next;
            len++;
        }

        temp.next = head;
        k = k%len;
        int end = len - k;
        while(end-- > 0) temp = temp.next;
        head = temp.next;
        temp.next = null;


        return head;
    }
}
N meetings in one room
EasyAccuracy: 45.3%Submissions: 195K+Points: 2
Short on funds for the festive season? Register for Hackathon and win cash rewards!  

banner
There is one meeting room in a firm. There are N meetings in the form of (start[i], end[i]) where start[i] is start time of meeting i and end[i] is finish time of meeting i.
What is the maximum number of meetings that can be accommodated in the meeting room when only one meeting can be held in the meeting room at a particular time?

Note: Start time of one chosen meeting can't be equal to the end time of the other chosen meeting.


Example 1:

Input:
N = 6
start[] = {1,3,0,5,8,5}
end[] =  {2,4,6,7,9,9}
Output: 
4
Explanation:
Maximum four meetings can be held with
given start and end timings.
The meetings are - (1, 2),(3, 4), (5,7) and (8,9)

solutions:

class Solution 
{
    //Function to find the maximum number of meetings that can
    //be performed in a meeting room.
    public static int maxMeetings(int start[], int end[], int n)
    {
        ArrayList<meet> list = new ArrayList<>();
        for(int i = 0; i < start.length; i++) {
            list.add(new meet(start[i],end[i],i+1));
        }
        
        MeetComparator comp = new MeetComparator();
        Collections.sort(list, comp);
        
        int res = 1;
        int lastPos = list.get(0).end;
        for(int i = 1; i < list.size(); i++) {
            if(list.get(i).start > lastPos) {
                res += 1;
                lastPos = list.get(i).end;
            }
        }
        return res;
    }
}

class meet {
    int start;
    int end;
    int pos;
    
    meet(int start, int end, int pos) {
        this.start = start;
        this.end = end;
        this.pos = pos;
    }
    
}

class MeetComparator implements Comparator<meet>{
    @Override
    public int compare(meet o1, meet o2) {
        if(o1.end <o2.end) return -1;
        else if(o1.end > o2.end) return 1;
        else if(o1.pos < o2.pos) return -1;
        else return 1;
    }
}
